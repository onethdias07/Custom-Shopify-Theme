

<div class="product-container">
  <!-- Product Images Section -->
  <div class="product-images">
    <div class="product-main-media">
      {% if product.media.first %}
        {% assign first_media = product.media.first %}
        {% if first_media.media_type == 'image' %}
          <img src="{{ first_media | img_url: '800x800' }}" 
               alt="{{ first_media.alt | default: product.title }}" 
               class="product-main-image" 
               id="mainImage">
        {% elsif first_media.media_type == 'video' %}
          <video class="product-main-video" id="mainVideo" controls>
            {% for source in first_media.sources %}
              <source src="{{ source.url }}" type="{{ source.mime_type }}">
            {% endfor %}
            Your browser does not support the video tag.
          </video>
        {% elsif first_media.media_type == 'external_video' %}
          <iframe class="product-main-external" id="mainExternal"
                  src="https://www.youtube.com/embed/{{ first_media.external_id }}"
                  frameborder="0" allowfullscreen></iframe>
        {% endif %}
      {% else %}
        <div class="product-image-placeholder">
          <svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="100" height="100" fill="#f0f0f0"/>
            <path d="M25 25h50v50H25z" fill="#ddd"/>
            <circle cx="35" cy="35" r="5" fill="#ccc"/>
            <path d="m30 50 10-10 15 15 10-10 10 10v10H30V50z" fill="#ccc"/>
          </svg>
          <p>No image available</p>
        </div>
      {% endif %}
    </div>
    
    {% if product.media.size > 0 and section.settings.show_thumbnails %}
      <div class="product-thumbnails">
        {% assign media_limit = section.settings.media_limit | default: 8 %}
        {% for media in product.media limit: media_limit %}
          {% if media.media_type == 'image' %}
            <img src="{{ media | img_url: '80x80' }}" 
                 alt="{{ media.alt | default: product.title }}" 
                 class="product-thumbnail{% if forloop.first %} active{% endif %}"
                 data-media-id="{{ media.id }}"
                 data-media-type="image"
                 data-media-src="{{ media | img_url: '800x800' }}"
                 onclick="changeMainMedia('{{ media | img_url: '800x800' }}', 'image', this, {{ media | json | escape }})">
          {% elsif media.media_type == 'video' %}
            <div class="product-thumbnail video-thumbnail{% if forloop.first %} active{% endif %}"
                 data-media-id="{{ media.id }}"
                 data-media-type="video"
                 data-media-src="{{ media.sources.first.url }}"
                 onclick="changeMainMedia('{{ media.sources.first.url }}', 'video', this, {{ media | json | escape }})">
              <img src="{{ media.preview_image | img_url: '80x80' }}" 
                   alt="{{ media.alt | default: product.title }}">
              <div class="video-play-icon">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </div>
            </div>
          {% elsif media.media_type == 'external_video' %}
            <div class="product-thumbnail video-thumbnail{% if forloop.first %} active{% endif %}"
                 data-media-id="{{ media.id }}"
                 data-media-type="external_video"
                 data-media-src="{{ media.external_id }}"
                 onclick="changeMainMedia('{{ media.external_id }}', 'external_video', this, {{ media | json | escape }})">
              <img src="{{ media.preview_image | img_url: '80x80' }}" 
                   alt="{{ media.alt | default: product.title }}">
              <div class="video-play-icon">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}
  </div>

  <!-- Product Details Section -->
  <div class="product-details">
    {% for block in section.blocks %}
      {% case block.type %}
        {% when 'title' %}
          <h1 class="product-title" {{ block.shopify_attributes }}>{{ product.title }}</h1>
        
        {% when 'price' %}
          <div class="product-price" {{ block.shopify_attributes }}>
            {% if product.compare_at_price > product.price %}
              <span class="price-on-sale">{{ product.price | money }}</span>
              <span class="compare-price">{{ product.compare_at_price | money }}</span>
            {% else %}
              <span class="price">{{ product.price | money }}</span>
            {% endif %}
          </div>
        
        {% when 'description' %}
          {% if block.settings.show_description and product.description != blank %}
            <div class="product-description" {{ block.shopify_attributes }}>
              {{ product.description }}
            </div>
          {% endif %}
        
        {% when 'variant_picker' %}
          {% if product.variants.size > 1 %}
            <div class="product-variants" {{ block.shopify_attributes }}>
              {% for option in product.options_with_values %}
                <div class="variant-group">
                  <label class="variant-label">{{ option.name }}</label>
                  <div class="variant-options">
                    {% for value in option.values %}
                      <div class="variant-option{% if forloop.first %} selected{% endif %}" 
                           data-option="{{ option.name | handleize }}" 
                           data-value="{{ value | escape }}">
                        {{ value }}
                      </div>
                    {% endfor %}
                  </div>
                </div>
              {% endfor %}
            </div>
          {% endif %}
        
        {% when 'quantity_selector' %}
          <div class="quantity-selector" {{ block.shopify_attributes }}>
            <label class="quantity-label">{{ block.settings.label | default: 'Quantity' }}</label>
            <div class="quantity-controls">
              <button class="quantity-btn" onclick="decreaseQuantity()">âˆ’</button>
              <input type="number" id="quantity" class="quantity-input" 
                     value="{{ block.settings.default_quantity | default: 1 }}" 
                     min="{{ block.settings.min_quantity | default: 1 }}" 
                     max="{{ block.settings.max_quantity | default: 10 }}">
              <button class="quantity-btn" onclick="increaseQuantity()">+</button>
            </div>
          </div>
        
        {% when 'buy_buttons' %}
          {% form 'product', product %}
            <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
            <div class="product-form-buttons" {{ block.shopify_attributes }}>
              <button class="add-to-cart-btn" type="submit">
                {{ block.settings.add_to_cart_text | default: 'Add to Cart' }}
              </button>
              {% if block.settings.show_dynamic_checkout %}
                {{ form | payment_button }}
              {% endif %}
            </div>
          {% endform %}
        
        {% when 'custom_text' %}
          {% if block.settings.text != blank %}
            <div class="product-custom-text" {{ block.shopify_attributes }}>
              {% if block.settings.heading != blank %}
                <h3 class="custom-text-heading">{{ block.settings.heading }}</h3>
              {% endif %}
              <div class="custom-text-content">
                {{ block.settings.text }}
              </div>
            </div>
          {% endif %}
        
        {% when 'features_list' %}
          {% if block.settings.features != blank %}
            <div class="product-features" {{ block.shopify_attributes }}>
              {% if block.settings.heading != blank %}
                <h3 class="features-heading">{{ block.settings.heading }}</h3>
              {% endif %}
              <ul class="features-list">
                {% assign features = block.settings.features | newline_to_br | strip_newlines | split: '<br />' %}
                {% for feature in features %}
                  {% if feature != blank %}
                    <li>{{ feature | strip }}</li>
                  {% endif %}
                {% endfor %}
              </ul>
            </div>
          {% endif %}
        
        {% when 'custom_liquid' %}
          {% if block.settings.custom_liquid != blank %}
            <div class="product-custom-liquid" {{ block.shopify_attributes }}>
              {{ block.settings.custom_liquid }}
            </div>
          {% endif %}
        
        {% when 'spacing' %}
          <div class="product-spacing" style="height: {{ block.settings.height | default: 20 }}px;" {{ block.shopify_attributes }}></div>
      
      {% endcase %}
    {% endfor %}
  </div>
</div>

<script>
  // Media gallery functionality
  function changeMainMedia(src, mediaType, clickedElement, mediaData) {
    const mainContainer = document.querySelector('.product-main-media');
    if (!mainContainer) return;
    
    // Clear existing media
    mainContainer.innerHTML = '';
    
    // Create new media element based on type
    if (mediaType === 'image') {
      const img = document.createElement('img');
      img.src = src;
      img.alt = (clickedElement.querySelector('img') && clickedElement.querySelector('img').alt) || '{{ product.title }}';
      img.className = 'product-main-image';
      img.id = 'mainImage';
      mainContainer.appendChild(img);
    } else if (mediaType === 'video') {
      const video = document.createElement('video');
      video.className = 'product-main-video';
      video.id = 'mainVideo';
      video.controls = true;
      
      // Add multiple sources if available
      try {
        const parsedMedia = JSON.parse(decodeURIComponent(mediaData));
        if (parsedMedia.sources) {
          parsedMedia.sources.forEach(source => {
            const sourceElement = document.createElement('source');
            sourceElement.src = source.url;
            sourceElement.type = source.mime_type;
            video.appendChild(sourceElement);
          });
        } else {
          const sourceElement = document.createElement('source');
          sourceElement.src = src;
          sourceElement.type = 'video/mp4';
          video.appendChild(sourceElement);
        }
      } catch (e) {
        const sourceElement = document.createElement('source');
        sourceElement.src = src;
        sourceElement.type = 'video/mp4';
        video.appendChild(sourceElement);
      }
      
      video.innerHTML += 'Your browser does not support the video tag.';
      mainContainer.appendChild(video);
    } else if (mediaType === 'external_video') {
      const iframe = document.createElement('iframe');
      iframe.className = 'product-main-external';
      iframe.id = 'mainExternal';
      iframe.src = `https://www.youtube.com/embed/${src}`;
      iframe.frameBorder = '0';
      iframe.allowFullscreen = true;
      mainContainer.appendChild(iframe);
    }
    
    // Update active thumbnail
    document.querySelectorAll('.product-thumbnail').forEach(thumb => {
      thumb.classList.remove('active');
    });
    clickedElement.classList.add('active');
  }
  
  // Legacy function for backwards compatibility
  function changeMainImage(src) {
    changeMainMedia(src, 'image', event.target, '');
  }
  
  // Initialize gallery on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Ensure the first thumbnail is marked as active if no active state is set
    const firstThumbnail = document.querySelector('.product-thumbnail');
    const activeThumbnail = document.querySelector('.product-thumbnail.active');
    
    if (firstThumbnail && !activeThumbnail) {
      firstThumbnail.classList.add('active');
    }
    
    // Add keyboard navigation
    document.querySelectorAll('.product-thumbnail').forEach((thumbnail, index) => {
      thumbnail.setAttribute('tabindex', '0');
      thumbnail.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          thumbnail.click();
        }
      });
    });
  });

  // Quantity controls
  function decreaseQuantity() {
    const quantityInput = document.getElementById('quantity');
    const currentValue = parseInt(quantityInput.value);
    if (currentValue > 1) {
      quantityInput.value = currentValue - 1;
    }
  }

  function increaseQuantity() {
    const quantityInput = document.getElementById('quantity');
    const currentValue = parseInt(quantityInput.value);
    const maxValue = parseInt(quantityInput.getAttribute('max')) || 10;
    if (currentValue < maxValue) {
      quantityInput.value = currentValue + 1;
    }
  }

  // Variant selection
  document.querySelectorAll('.variant-option').forEach(option => {
    option.addEventListener('click', function() {
      const parent = this.parentElement;
      parent.querySelectorAll('.variant-option').forEach(opt => opt.classList.remove('selected'));
      this.classList.add('selected');
      
      // Update variant ID based on selected options
      updateVariant();
    });
  });

  // Update variant based on selected options
  function updateVariant() {
    const selectedOptions = {};
    document.querySelectorAll('.variant-group').forEach(group => {
      const selectedOption = group.querySelector('.variant-option.selected');
      if (selectedOption) {
        const optionName = selectedOption.getAttribute('data-option');
        const optionValue = selectedOption.getAttribute('data-value');
        if (optionName && optionValue) {
          selectedOptions[optionName] = optionValue;
        }
      }
    });

    // Find matching variant
    const variants = {{ product.variants | json }};
    const matchingVariant = variants.find(variant => {
      return variant.options.every((option, index) => {
        const optionName = {{ product.options | map: 'name' | map: 'handleize' | json }}[index];
        return selectedOptions[optionName] === option;
      });
    });

    if (matchingVariant) {
      // Update hidden input
      const hiddenInput = document.querySelector('input[name="id"]');
      if (hiddenInput) {
        hiddenInput.value = matchingVariant.id;
      }

      // Update price display
      const priceElement = document.querySelector('.product-price');
      if (priceElement) {
        const price = new Intl.NumberFormat('{{ shop.locale }}', {
          style: 'currency',
          currency: '{{ shop.currency }}'
        }).format(matchingVariant.price / 100);

        if (matchingVariant.compare_at_price && matchingVariant.compare_at_price > matchingVariant.price) {
          const comparePrice = new Intl.NumberFormat('{{ shop.locale }}', {
            style: 'currency',
            currency: '{{ shop.currency }}'
          }).format(matchingVariant.compare_at_price / 100);
          
          priceElement.innerHTML = `<span class="price-on-sale">${price}</span><span class="compare-price">${comparePrice}</span>`;
        } else {
          priceElement.innerHTML = `<span class="price">${price}</span>`;
        }
      }

      // Update availability
      const addToCartBtn = document.querySelector('.add-to-cart-btn');
      if (addToCartBtn) {
        if (matchingVariant.available) {
          addToCartBtn.disabled = false;
          addToCartBtn.textContent = addToCartBtn.getAttribute('data-add-to-cart-text') || 'Add to Cart';
        } else {
          addToCartBtn.disabled = true;
          addToCartBtn.textContent = 'Sold Out';
        }
      }
    }
  }

  // Quantity input validation
  document.getElementById('quantity').addEventListener('change', function() {
    const value = parseInt(this.value);
    const min = parseInt(this.getAttribute('min')) || 1;
    const max = parseInt(this.getAttribute('max')) || 10;
    
    if (value < min) this.value = min;
    if (value > max) this.value = max;
  });
</script>


{% schema %}
{
  "name": "Main Product",
  "tag": "section",
  "settings": [
    {
      "type": "header",
      "content": "Media Settings"
    },
    {
      "type": "range",
      "id": "media_limit",
      "label": "Maximum media items to show",
      "min": 1,
      "max": 12,
      "step": 1,
      "default": 8
    },
    {
      "type": "checkbox",
      "id": "show_thumbnails",
      "label": "Show thumbnail gallery",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "title",
      "name": "Product Title",
      "limit": 1,
      "settings": []
    },
    {
      "type": "price",
      "name": "Product Price",
      "limit": 1,
      "settings": []
    },
    {
      "type": "description",
      "name": "Product Description",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_description",
          "label": "Show product description",
          "default": true
        }
      ]
    },
    {
      "type": "variant_picker",
      "name": "Variant Picker",
      "limit": 1,
      "settings": []
    },
    {
      "type": "quantity_selector",
      "name": "Quantity Selector",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Quantity label",
          "default": "Quantity"
        },
        {
          "type": "range",
          "id": "default_quantity",
          "label": "Default quantity",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 1
        },
        {
          "type": "range",
          "id": "min_quantity",
          "label": "Minimum quantity",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 1
        },
        {
          "type": "range",
          "id": "max_quantity",
          "label": "Maximum quantity",
          "min": 1,
          "max": 100,
          "step": 1,
          "default": 10
        }
      ]
    },
    {
      "type": "buy_buttons",
      "name": "Buy Buttons",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "add_to_cart_text",
          "label": "Add to cart button text",
          "default": "Add to Cart"
        },
        {
          "type": "checkbox",
          "id": "show_dynamic_checkout",
          "label": "Show dynamic checkout buttons",
          "info": "Each customer will see their preferred payment method from those available on your store, such as PayPal or Apple Pay.",
          "default": true
        }
      ]
    },
    {
      "type": "custom_text",
      "name": "Custom Text",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text"
        }
      ]
    },
    {
      "type": "features_list",
      "name": "Features List",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "label": "Heading",
          "default": "Features"
        },
        {
          "type": "textarea",
          "id": "features",
          "label": "Features",
          "info": "Enter each feature on a new line",
          "default": "High-quality materials\nDurable construction\nModern design\nEasy to use"
        }
      ]
    },
    {
      "type": "custom_liquid",
      "name": "Custom Liquid",
      "settings": [
        {
          "type": "liquid",
          "id": "custom_liquid",
          "label": "Custom Liquid",
          "info": "Add custom Liquid code for advanced customizations"
        }
      ]
    },
    {
      "type": "spacing",
      "name": "Spacing",
      "settings": [
        {
          "type": "range",
          "id": "height",
          "label": "Spacing height (px)",
          "min": 10,
          "max": 100,
          "step": 5,
          "default": 20
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Main Product",
      "blocks": [
        {
          "type": "title"
        },
        {
          "type": "price"
        },
        {
          "type": "description"
        },
        {
          "type": "variant_picker"
        },
        {
          "type": "quantity_selector"
        },
        {
          "type": "buy_buttons"
        }
      ]
    }
  ]
}
{% endschema %}